from pathlib import Path
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Frame, PageTemplate
from reportlab.lib import colors
from reportlab.pdfgen import canvas
from datetime import datetime
from typing import Dict, Any, Optional, Callable
from app.schemas_new.agentic_state import AgenticState, StageEvent
from app.utils.logging import get_logger

logger = get_logger(__name__)

BASE_DIR = Path.cwd()
PDF_DIR = BASE_DIR / "tmp_pdfs"
PDF_DIR.mkdir(exist_ok=True, parents=True)

# Footer function for page number and branding
def add_footer(canvas_obj, doc):
    canvas_obj.setFont("Helvetica-Oblique", 8)
    canvas_obj.setFillColor(colors.grey)
    canvas_obj.drawString(40, 20, f"Generated by Norwegian GP Agentic AI")
    canvas_obj.drawRightString(A4[0]-40, 20, f"Page {doc.page}")

async def patient_summary_pdf_node(
    state: AgenticState,
    ws_send: Optional[Callable[[Dict[str, Any]], Any]] = None
) -> Dict[str, Any]:

    updates: Dict[str, Any] = {}
    pdf_filename = f"patient_summary_{state.session_id}.pdf"
    pdf_path = PDF_DIR / pdf_filename
    logger.info(f"[PATIENT_PDF_NODE] Generating PDF at {pdf_path}")

    try:
        doc = SimpleDocTemplate(str(pdf_path), pagesize=A4,
                                rightMargin=40, leftMargin=40, topMargin=80, bottomMargin=60)
        elements = []
        styles = getSampleStyleSheet()

        # Custom styles
        header_style = ParagraphStyle('Header', parent=styles['Heading1'], fontSize=20, alignment=1, textColor=colors.HexColor("#0B5394"), spaceAfter=12)
        subheader_style = ParagraphStyle('SubHeader', parent=styles['Heading2'], fontSize=14, textColor=colors.HexColor("#3C78D8"), spaceAfter=6)
        normal_style = ParagraphStyle('Normal', parent=styles['Normal'], fontSize=11, spaceAfter=6)
        small_style = ParagraphStyle('Small', parent=styles['Normal'], fontSize=9, textColor=colors.grey, spaceAfter=4)
        box_style = TableStyle([
            ('BACKGROUND', (0,0), (-1,-1), colors.HexColor("#F2F2F2")),
            ('BOX', (0,0), (-1,-1), 0.8, colors.HexColor("#0B5394")),
            ('INNERGRID', (0,0), (-1,-1), 0.5, colors.HexColor("#3C78D8")),
            ('LEFTPADDING', (0,0), (-1,-1), 6),
            ('RIGHTPADDING', (0,0), (-1,-1), 6),
            ('TOPPADDING', (0,0), (-1,-1), 6),
            ('BOTTOMPADDING', (0,0), (-1,-1), 6)
        ])

        # Header
        elements.append(Paragraph("Norwegian GP Agentic AI", header_style))
        elements.append(Paragraph("Patient Consultation Summary", subheader_style))
        elements.append(Paragraph(f"Session ID: {state.session_id}", small_style))
        elements.append(Paragraph(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", small_style))
        elements.append(Spacer(1, 12))

        # SOAP / Condition
        elements.append(Paragraph("Condition / SOAP Note", subheader_style))
        soap_table = Table([[Paragraph(getattr(state, "soap_text", "N/A"), normal_style)]], colWidths=[480])
        soap_table.setStyle(box_style)
        elements.append(soap_table)
        elements.append(Spacer(1, 12))

        # Predicted Codes
        if state.predicted_service_codes:
            elements.append(Paragraph("Predicted Service Codes", subheader_style))
            table_data = [["Code", "Severity", "Missing Terms", "Suggestions"]]
            for idx, sc in enumerate(state.predicted_service_codes):
                missing_terms = ", ".join([mt.term for mt in sc.missing_terms or []])
                suggestions = "\n".join(sc.suggestions or [])
                table_data.append([sc.code, getattr(sc, "severity", "N/A"), missing_terms, suggestions])
            table_style = TableStyle([
                ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#D9E1F2")),
                ('TEXTCOLOR',(0,0),(-1,0),colors.black),
                ('ALIGN',(0,0),(-1,-1),'LEFT'),
                ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0,0), (-1,0), 8),
                ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
            ])
            # alternating row colors
            for i in range(1, len(table_data)):
                if i % 2 == 0:
                    table_style.add('BACKGROUND', (0,i), (-1,i), colors.HexColor("#F2F2F2"))
            code_table = Table(table_data, colWidths=[60, 60, 150, 210])
            code_table.setStyle(table_style)
            elements.append(code_table)
            elements.append(Spacer(1, 12))

        # Referral Info
        elements.append(Paragraph("Referral Information", subheader_style))
        referral_text = "Referral required: Yes" if getattr(state, "referral_required", False) else "No referral required"
        if getattr(state, "referral_rule_applied", None):
            referral_text += f" (Rule applied: {state.referral_rule_applied})"
        referral_table = Table([[Paragraph(referral_text, normal_style)]], colWidths=[480])
        referral_table.setStyle(box_style)
        elements.append(referral_table)
        elements.append(Spacer(1, 12))

        # Patient Summary
        elements.append(Paragraph("Patient-Friendly Summary", subheader_style))
        summary_text = getattr(state, "patient_summary", "No summary available.")
        summary_lines = [[Paragraph(line, normal_style)] for line in summary_text.split("\n")]
        summary_table = Table(summary_lines, colWidths=[480])
        summary_table.setStyle(box_style)
        elements.append(summary_table)
        elements.append(Spacer(1, 12))

        # Reasoning / Notes
        elements.append(Paragraph("Notes / Reasoning Trail", subheader_style))
        for line in getattr(state, "reasoning_trail", []):
            elements.append(Paragraph(f"- {line}", small_style))

        # Build PDF with footer
        doc.build(elements, onFirstPage=add_footer, onLaterPages=add_footer)
        logger.info(f"[PATIENT_PDF_NODE] PDF saved successfully: {pdf_path}")

    except Exception as e:
        logger.error(f"[PATIENT_PDF_NODE] PDF generation failed: {e}")
        updates["patient_summary_pdf_path"] = ""
        return updates

    updates["patient_summary_pdf_path"] = str(pdf_path)

    stages = getattr(state, "stages", [])
    stages.append(StageEvent(
        code="patient_summary_pdf",
        description="Summary PDF generated",
        data={"summary": f"PDF ready ({pdf_path.stat().st_size//1024} KB)", "path": str(pdf_path)}
    ))
    updates["stages"] = stages

    if ws_send:
        try:
            await ws_send({
                "event_type": "pdf_ready",
                "payload": {
                    "filename": pdf_filename,
                    "download_url": f"/api/download_pdf/{state.session_id}"
                }
            })
        except Exception as e:
            logger.error(f"[PATIENT_PDF_NODE] WS failed: {e}")

    return updates
